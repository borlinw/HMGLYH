<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.0.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<description>Spring公共配置文件 </description>
	<context:property-placeholder location="classpath:application.properties" />
	<!-- 启动 @AspectJ 支持       ！代理接口-->
    <aop:aspectj-autoproxy />
    <!-- 启动 @AspectJ 支持       ！proxy-target-class="true"代理到类-->
<!--<aop:aspectj-autoproxy proxy-target-class="true" /> -->
    <!-- 数据源配置, 使用应用中的BoneCP数据库连接池 -->
	<bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource"
		destroy-method="close" lazy-init="false">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxConnectionsPerPartition" value="${bcpds.maxConnectionsPerPartition}" />
		<property name="minConnectionsPerPartition" value="${bcpds.minConnectionsPerPartition}" />
		<property name="partitionCount" value="${bcpds.partitionCount}" />
		<property name="acquireIncrement" value="${bcpds.acquireIncrement}" />
		<property name="statementsCacheSize" value="${bcpds.statementsCacheSize}" />
		<property name="releaseHelperThreads" value="${bcpds.releaseHelperThreads}" />
		<!--设置是开启connection关闭情况监视器功能。这个参数默认为false。 
                                    每当调用getConnection()时，都会创建CloseThreadMonitor，监视connection有没有关闭或是关闭了两次。
                                   警告：这个参数对连接池性能有很大的负面影响，慎用！仅在调试阶段使用！ -->
		<property name="closeConnectionWatch" value="false" />
		<!--设置是否开启记录SQL语句功能。这个参数默认是false。 
                                    将执行的SQL记录到日志里面（包括参数值）。  -->
		<property name="logStatementsEnabled" value="false" />
		<!--设置是否关闭connection跟踪功能。这个参数默认为false。 
                                    设置为true，连接池则不会监控connection是否严格的关闭；设置为false，则启用跟踪功能（仅追踪通过Spring或一些事务管理等机制确保正确释放connection并放回到连接池中）。 -->
		<property name="disableConnectionTracking" value="true" />
		<!--设置事务回放功能。这个参数默认为false。 
                                    设置为true时，MemorizeTransactionProxy可以记录所有在connection上操作的情况，
                                    当connetion操作失败的时候会自动回放先前的操作，如果在回放期间还是失败，则抛出异常-->
		<property name="transactionRecoveryEnabled" value="false" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:com/hdsx/hmglyh/rcyh/dao/HtglMjlxMapper.xml"></property>
		<property name="configLocation">
			<value>classpath:mybatis-config.xml</value>
		</property> 
	</bean>
	<!-- spring管理事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 注解式事务添加 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
<!-- 	<bean id="app" class="com.hdsx.hmglyh.util.SpringContextUtil"></bean> -->
	<bean id="bumenMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.hdsx.hmglyh.gis.jichusj.guanyangdw.dao.HtglBmbMapper" />
		<property name="SqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<!-- <bean id="bumenService" class="com.hdsx.hmglyh.gis.jichusj.guanyangdw.service.impl.BumenServiceImpl">
		<property name="hbMapper" ref="bumenMapper"></property>
	</bean> -->
	
	
	<!-- 测试流程需要的bean -->
	 <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
         <property name="dataSource" ref="dataSource" />
         <property name="transactionManager" ref="transactionManager" />
         <property name="databaseSchemaUpdate" value="true" />
         <property name="jobExecutorActivate" value="true" />
         <property name="dbIdentityUsed" value="false"></property>
         <property name="deploymentResources">
         	<list>
         		<value>classpath:/activiti/bhProcess.zip</value>
         		<value>classpath:/activiti/wxProcess.zip</value>
         	</list>
         </property>
    </bean>
 
     <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
         <property name="processEngineConfiguration" ref="processEngineConfiguration" />
    </bean>
 
    <bean id="repositoryService" factory-bean="processEngine"
         factory-method="getRepositoryService" />
    <bean id="runtimeService" factory-bean="processEngine"
         factory-method="getRuntimeService" />
    <bean id="taskService" factory-bean="processEngine"
         factory-method="getTaskService" />
    <bean id="historyService" factory-bean="processEngine"
         factory-method="getHistoryService" />
    <bean id="managementService" factory-bean="processEngine"
         factory-method="getManagementService" /> 
</beans>
